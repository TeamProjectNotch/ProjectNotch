//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public DCPUComponent dCPU { get { return (DCPUComponent)GetComponent(GameComponentsLookup.DCPU); } }
    public bool hasDCPU { get { return HasComponent(GameComponentsLookup.DCPU); } }

    public void AddDCPU(DCPUState newState) {
        var index = GameComponentsLookup.DCPU;
        var component = CreateComponent<DCPUComponent>(index);
        component.state = newState;
        AddComponent(index, component);
    }

    public void ReplaceDCPU(DCPUState newState) {
        var index = GameComponentsLookup.DCPU;
        var component = CreateComponent<DCPUComponent>(index);
        component.state = newState;
        ReplaceComponent(index, component);
    }

    public void RemoveDCPU() {
        RemoveComponent(GameComponentsLookup.DCPU);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDCPU;

    public static Entitas.IMatcher<GameEntity> DCPU {
        get {
            if (_matcherDCPU == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DCPU);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDCPU = matcher;
            }

            return _matcherDCPU;
        }
    }
}
