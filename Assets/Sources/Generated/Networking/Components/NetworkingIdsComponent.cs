//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NetworkingContext {

    public NetworkingEntity idsEntity { get { return GetGroup(NetworkingMatcher.Ids).GetSingleEntity(); } }
    public IdsComponent ids { get { return idsEntity.ids; } }
    public bool hasIds { get { return idsEntity != null; } }

    public NetworkingEntity SetIds(int newHost, int newChannelReliableFragmented, int newChannelUnreliable) {
        if (hasIds) {
            throw new Entitas.EntitasException("Could not set Ids!\n" + this + " already has an entity with IdsComponent!",
                "You should check if the context already has a idsEntity before setting it or use context.ReplaceIds().");
        }
        var entity = CreateEntity();
        entity.AddIds(newHost, newChannelReliableFragmented, newChannelUnreliable);
        return entity;
    }

    public void ReplaceIds(int newHost, int newChannelReliableFragmented, int newChannelUnreliable) {
        var entity = idsEntity;
        if (entity == null) {
            entity = SetIds(newHost, newChannelReliableFragmented, newChannelUnreliable);
        } else {
            entity.ReplaceIds(newHost, newChannelReliableFragmented, newChannelUnreliable);
        }
    }

    public void RemoveIds() {
        idsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class NetworkingEntity {

    public IdsComponent ids { get { return (IdsComponent)GetComponent(NetworkingComponentsLookup.Ids); } }
    public bool hasIds { get { return HasComponent(NetworkingComponentsLookup.Ids); } }

    public void AddIds(int newHost, int newChannelReliableFragmented, int newChannelUnreliable) {
        var index = NetworkingComponentsLookup.Ids;
        var component = CreateComponent<IdsComponent>(index);
        component.host = newHost;
        component.channelReliableFragmented = newChannelReliableFragmented;
        component.channelUnreliable = newChannelUnreliable;
        AddComponent(index, component);
    }

    public void ReplaceIds(int newHost, int newChannelReliableFragmented, int newChannelUnreliable) {
        var index = NetworkingComponentsLookup.Ids;
        var component = CreateComponent<IdsComponent>(index);
        component.host = newHost;
        component.channelReliableFragmented = newChannelReliableFragmented;
        component.channelUnreliable = newChannelUnreliable;
        ReplaceComponent(index, component);
    }

    public void RemoveIds() {
        RemoveComponent(NetworkingComponentsLookup.Ids);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class NetworkingMatcher {

    static Entitas.IMatcher<NetworkingEntity> _matcherIds;

    public static Entitas.IMatcher<NetworkingEntity> Ids {
        get {
            if (_matcherIds == null) {
                var matcher = (Entitas.Matcher<NetworkingEntity>)Entitas.Matcher<NetworkingEntity>.AllOf(NetworkingComponentsLookup.Ids);
                matcher.componentNames = NetworkingComponentsLookup.componentNames;
                _matcherIds = matcher;
            }

            return _matcherIds;
        }
    }
}
